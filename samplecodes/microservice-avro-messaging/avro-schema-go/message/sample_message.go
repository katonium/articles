// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     sample.avsc
 */
package message

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SampleMessage struct {
	StringField string `json:"StringField"`

	FloatField float32 `json:"FloatField"`

	BooleanField bool `json:"BooleanField"`
}

const SampleMessageAvroCRC64Fingerprint = "\xbc\x13\xe9\xa3M\a4|"

func NewSampleMessage() SampleMessage {
	r := SampleMessage{}
	return r
}

func DeserializeSampleMessage(r io.Reader) (SampleMessage, error) {
	t := NewSampleMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSampleMessageFromSchema(r io.Reader, schema string) (SampleMessage, error) {
	t := NewSampleMessage()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSampleMessage(r SampleMessage, w io.Writer) error {
	var err error
	err = vm.WriteString(r.StringField, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.FloatField, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.BooleanField, w)
	if err != nil {
		return err
	}
	return err
}

func (r SampleMessage) Serialize(w io.Writer) error {
	return writeSampleMessage(r, w)
}

func (r SampleMessage) Schema() string {
	return "{\"fields\":[{\"name\":\"StringField\",\"type\":\"string\"},{\"name\":\"FloatField\",\"type\":\"float\"},{\"name\":\"BooleanField\",\"type\":\"boolean\"}],\"name\":\"SampleMessage\",\"type\":\"record\"}"
}

func (r SampleMessage) SchemaName() string {
	return "SampleMessage"
}

func (_ SampleMessage) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SampleMessage) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SampleMessage) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SampleMessage) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SampleMessage) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SampleMessage) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SampleMessage) SetString(v string)   { panic("Unsupported operation") }
func (_ SampleMessage) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SampleMessage) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.StringField}

		return w

	case 1:
		w := types.Float{Target: &r.FloatField}

		return w

	case 2:
		w := types.Boolean{Target: &r.BooleanField}

		return w

	}
	panic("Unknown field index")
}

func (r *SampleMessage) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *SampleMessage) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ SampleMessage) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SampleMessage) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SampleMessage) HintSize(int)                     { panic("Unsupported operation") }
func (_ SampleMessage) Finalize()                        {}

func (_ SampleMessage) AvroCRC64Fingerprint() []byte {
	return []byte(SampleMessageAvroCRC64Fingerprint)
}

func (r SampleMessage) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["StringField"], err = json.Marshal(r.StringField)
	if err != nil {
		return nil, err
	}
	output["FloatField"], err = json.Marshal(r.FloatField)
	if err != nil {
		return nil, err
	}
	output["BooleanField"], err = json.Marshal(r.BooleanField)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SampleMessage) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["StringField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StringField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StringField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FloatField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FloatField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FloatField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["BooleanField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BooleanField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for BooleanField")
	}
	return nil
}
